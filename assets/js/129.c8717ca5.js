(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{548:function(t,a,e){"use strict";e.r(a);var s=e(65),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),e("h2",{attrs:{id:"_1、-单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、-单例模式"}},[t._v("#")]),t._v(" 1、 单例模式")]),t._v(" "),e("blockquote",[e("p",[t._v("定义：单例模式就是在程序运行中只实例化一次，创建一个全局唯一对象，有点像 Java 的静态变量，但是单例模式要优于静态变量，静态变量在程序启动的时候JVM就会进行加载，如果不使用，会造成大量的资源浪费，单例模式能够实现懒加载，能够在使用实例的时候才去创建实例。开发工具类库中的很多工具类都应用了单例模式，比例线程池、缓存、日志对象等，它们都只需要创建一个对象，如果创建多份实例，可能会带来不可预知的问题，比如资源的浪费、结果处理不一致等问题。")])]),t._v(" "),e("p",[t._v("实现思路：")]),t._v(" "),e("ul",[e("li",[t._v("静态化实例对象")]),t._v(" "),e("li",[t._v("私有化构造方法，禁止通过构造方法创建实例")]),t._v(" "),e("li",[t._v("提供一个公共的静态方法，用来返回唯一实例")])]),t._v(" "),e("p",[t._v("具体实现：")]),t._v(" "),e("p",[t._v("单例模式的写法有饿汉模式、懒汉模式、双重检查锁模式、静态内部类单例模式、枚举类实现单例模式五种方式")])])}),[],!1,null,null,null);a.default=_.exports}}]);