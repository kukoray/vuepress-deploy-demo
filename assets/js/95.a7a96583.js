(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{516:function(n,t,e){"use strict";e.r(t);var v=e(65),a=Object(v.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"学习路线"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#学习路线"}},[n._v("#")]),n._v(" 学习路线")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://s2.loli.net/2022/09/19/Yr8MQpmINZjzxvn.jpg",alt:"img"}})]),n._v(" "),e("h2",{attrs:{id:"一、内存的分区模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、内存的分区模型"}},[n._v("#")]),n._v(" 一、内存的分区模型")]),n._v(" "),e("p",[n._v("c++程序的分区")]),n._v(" "),e("ul",[e("li",[n._v("代码区")]),n._v(" "),e("li",[n._v("全局区")]),n._v(" "),e("li",[n._v("栈区：编译器自动分配释放，存放函数的参数值，局部变量等（通常我们dfs时说的爆栈就是这个东西）")]),n._v(" "),e("li",[n._v("堆区：由程序员分配和释放")])]),n._v(" "),e("p",[n._v("代码区：存放cpu执行的机器指令，代码区是共享的（对于频繁被执行的程序，内存中只需要存一份即可），也是只读（避免因为一些原因被修改了）")]),n._v(" "),e("p",[n._v("全局区：包括全局变量和静态变量（static）、常量（字符串常量、全局常量），该区域的数据在程序结束后由操作系统释放。"),e("strong",[n._v("局部变量、局部常量不在这个里面")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://s2.loli.net/2022/09/22/dIAxSYrOHt4VvNQ.png",alt:"image-20220922164152922"}})]),n._v(" "),e("p",[e("img",{attrs:{src:"https://s2.loli.net/2022/09/22/Zdj1Kf87rNMoqJp.png",alt:"image-20220922164236349"}})]),n._v(" "),e("p",[n._v("栈区：由编译器，存放局部变量、形参；")]),n._v(" "),e("p",[n._v("函数不要返回局部变量的地址，编译器第一次对于这个地址进行了一次保留，第二次的时候会被编译器释放，就访问不到那个局部变量的数据了。")]),n._v(" "),e("p",[n._v("堆区：由程序员分配释放")]),n._v(" "),e("p",[n._v("在c++中主要利用new")]),n._v(" "),e("p",[n._v("int * p = new int(10);   //这里指针p也是局部变量，但是指针保存的数据在堆区（申请一个int的空间，初始化为10，返回int *型的指针指向这块空间）")]),n._v(" "),e("p",[n._v("释放堆区，使用delete操作符")]),n._v(" "),e("p",[n._v("delete p;")]),n._v(" "),e("p",[n._v("int * arr = new int [10]; // 这里是分配了10个int的空间，返回了这个数组的首地址")]),n._v(" "),e("p",[n._v("delete [] arr;")]),n._v(" "),e("h2",{attrs:{id:"二、c-中的引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、c-中的引用"}},[n._v("#")]),n._v(" 二、c++中的引用")]),n._v(" "),e("p",[n._v("引用必须要初始化，必须要告诉他是谁的别名")]),n._v(" "),e("p",[n._v("一旦初始化之后，就不可以更改；")]),n._v(" "),e("p",[n._v("在函数中 引用也是可以实现用形参来改变实参的作用的")]),n._v(" "),e("p",[n._v("int a = 10;")]),n._v(" "),e("p",[n._v("int & ref = a;")]),n._v(" "),e("p",[n._v("和堆区的原理一样，局部变量的引用不要作为函数的返回值，因为会被栈区释放，第一次能保留，第二次的 时候就被编译器释放了")]),n._v(" "),e("p",[n._v("另外，一个函数的返回值如果是引用类型，那么这个函数名也可以作为坐值对他进行赋值；")]),n._v(" "),e("p",[n._v("例如  test()=1000;  //   int & test(){}")]),n._v(" "),e("p",[n._v("引用的本质：是一个"),e("strong",[n._v("指针常量")]),n._v("；   int & ref = a;相当于 int * const ref = &a ;")]),n._v(" "),e("p",[n._v("常量引用：const int & val ;防止函数中对于引用变量的改变，导致实参发生改变")]),n._v(" "),e("p",[n._v("const int  & 和 int &是两种不同的数据类型")]),n._v(" "),e("h2",{attrs:{id:"三、类和对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、类和对象"}},[n._v("#")]),n._v(" 三、类和对象")]),n._v(" "),e("p",[n._v("面向对象四大特性：封装、继承、多态、抽象")]),n._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('#include <iostream>\n \nusing namespace std;\n \nclass Box\n{\n   public:\n      double length;   // 长度\n      double breadth;  // 宽度\n      double height;   // 高度\n      // 成员函数声明\n      double get(void);\n      void set( double len, double bre, double hei );\n};\n// 成员函数定义\ndouble Box::get(void)\n{\n    return length * breadth * height;\n}\n \nvoid Box::set( double len, double bre, double hei)\n{\n    length = len;\n    breadth = bre;\n    height = hei;\n}\nint main( )\n{\n   Box Box1;        // 声明 Box1，类型为 Box\n   Box Box2;        // 声明 Box2，类型为 Box\n   Box Box3;        // 声明 Box3，类型为 Box\n   double volume = 0.0;     // 用于存储体积\n \n   // box 1 详述\n   Box1.height = 5.0; \n   Box1.length = 6.0; \n   Box1.breadth = 7.0;\n \n   // box 2 详述\n   Box2.height = 10.0;\n   Box2.length = 12.0;\n   Box2.breadth = 13.0;\n \n   // box 1 的体积\n   volume = Box1.height * Box1.length * Box1.breadth;\n   cout << "Box1 的体积：" << volume <<endl;\n \n   // box 2 的体积\n   volume = Box2.height * Box2.length * Box2.breadth;\n   cout << "Box2 的体积：" << volume <<endl;\n \n \n   // box 3 详述\n   Box3.set(16.0, 8.0, 12.0); \n   volume = Box3.get(); \n   cout << "Box3 的体积：" << volume <<endl;\n   return 0;\n}\n')])])]),e("p",[n._v("保护权限和私有权限都是类内可以直接访问，类外无法访问")]),n._v(" "),e("p",[n._v("面试题：struct和class的区别")]),n._v(" "),e("p",[n._v("区别：")]),n._v(" "),e("ol",[e("li",[n._v("struct默认权限为公共")]),n._v(" "),e("li",[n._v("class默认访问权限为私有")])]),n._v(" "),e("h3",{attrs:{id:"构造函数和析构函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和析构函数"}},[n._v("#")]),n._v(" 构造函数和析构函数")]),n._v(" "),e("p",[n._v("我们不提供时，编译器会提供空的实现")]),n._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//\n// Created by Jacky on 2022-09-23.\n//\n\n#include <iostream>\nusing namespace std;\n\nclass Line {\npublic:\n\n    Line();  // 这是构造函数\n\n    Line(double length);\n\n    virtual ~Line();\n\n\n    double getLength() const;\n\n    void setLength(double length);\n\nprivate:\n    double length;\n};\n\n// 成员函数定义，包括构造函数\nLine::Line(void) {\n    cout << "Object is being created" << endl;\n}\n\nLine::Line(double length) : length(length) {}\n\nLine::~Line() {\n\n}\n\ndouble Line::getLength() const {\n    return length;\n}\n\nvoid Line::setLength(double length) {\n    Line::length = length;\n}\n\n// 程序的主函数\nint main() {\n    Line line;\n\n    // 设置长度\n    line.setLength(6.0);\n    cout << "Length of line : " << line.getLength() << endl;\n\n    return 0;\n}\n')])])]),e("p",[n._v("析构函数不可以有参数")]),n._v(" "),e("p",[n._v("对象在销毁前，会调用析构函数，只会调用一次")]),n._v(" "),e("h3",{attrs:{id:"深拷贝与浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝与浅拷贝"}},[n._v("#")]),n._v(" 深拷贝与浅拷贝")]),n._v(" "),e("p",[n._v("拷贝构造函数")]),n._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Line::Line(const Line &obj)\n{\n    cout << "调用拷贝构造函数并为指针 ptr 分配内存" << endl;\n    ptr = new int;\n    *ptr = *obj.ptr; // 拷贝值\n}\n')])])]),e("p",[n._v("深拷贝与浅拷贝的区别就在于深拷贝会在堆内存中另外申请空间来储存数据，从而也就解决了指针悬挂的问题。")]),n._v(" "),e("p",[n._v("简而言之，当数据成员中有指针时，必须要用深拷贝。")]),n._v(" "),e("p",[n._v("如果类没有显式实现拷贝构造函数，那么系统会调用默认的拷贝函数：浅拷贝")]),n._v(" "),e("h3",{attrs:{id:"抽象类-接口类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象类-接口类"}},[n._v("#")]),n._v(" 抽象类，接口类")]),n._v(" "),e("p",[n._v("接口描述了类的行为和功能，而不需要完成类的特定实现。")]),n._v(" "),e("p",[n._v("C++ 接口是使用"),e("strong",[n._v("抽象类")]),n._v("来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。")]),n._v(" "),e("p",[e("u",[n._v("如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类")]),n._v('。纯虚函数是通过在声明中使用 "= 0" 来指定的，如下所示：')]),n._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Box\n{\n   public:\n      // 纯虚函数\n      virtual double getVolume() = 0;\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n\n")])])]),e("p",[n._v("抽象类不能被用于实例化对象，它只能作为"),e("strong",[n._v("接口")]),n._v("使用。如果试图实例化一个抽象类的对象，会导致编译错误。")]),n._v(" "),e("h2",{attrs:{id:"四、文件和流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、文件和流"}},[n._v("#")]),n._v(" 四、文件和流")])])}),[],!1,null,null,null);t.default=a.exports}}]);