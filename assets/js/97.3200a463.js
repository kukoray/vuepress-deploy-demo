(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{518:function(t,e,a){"use strict";a.r(e);var s=a(65),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"单线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程模型"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/CSDN_LQR/article/details/115607681",target:"_blank",rel:"noopener noreferrer"}},[t._v("单线程模型"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("与JS一样，Dart是基于事件循环机制的单线程模型，Dart中没有用户多线程，没有主线程与子线程之分。")]),t._v(" "),a("h2",{attrs:{id:"事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),a("p",[t._v("Dart事件循环由一个消息循环（Event Looper）和两个消息队列（Event Queue）构成。")]),t._v(" "),a("p",[t._v("两个消息队列分别是：")]),t._v(" "),a("ul",[a("li",[t._v("事件队列（Event Queue）")]),t._v(" "),a("li",[t._v("微任务队列（MicroTask Queue）")])]),t._v(" "),a("h3",{attrs:{id:"event-looper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-looper"}},[t._v("#")]),t._v(" Event Looper")]),t._v(" "),a("p",[t._v("Main函数执行完之后开始工作，优先执行完MicroTask Queue中的事件，为空时才会执行Event Queue中的事件")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/aabb7b94db96c8ecd4365d30fc189cbe.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"event-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-queue"}},[t._v("#")]),t._v(" Event Queue")]),t._v(" "),a("p",[t._v("其Event来源于"),a("strong",[t._v("外部事件")]),t._v("和"),a("strong",[t._v("Future")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("外部事件：输入输入、计时器、Stream等")])]),t._v(" "),a("li",[a("p",[t._v("Future：自定义的Event Queue事件")]),t._v(" "),a("div",{staticClass:"language-dart extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("对于外部事件，一旦没有任务microtask要执行，才会考虑event queue中的第一项")])]),t._v(" "),a("h3",{attrs:{id:"microtask-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#microtask-queue"}},[t._v("#")]),t._v(" MicroTask Queue")]),t._v(" "),a("p",[t._v("优先级高于前者。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用场景")]),t._v(" "),a("p",[t._v("想在稍后完成一些任务，又希望在执行下一个事件之间执行")])])]),t._v(" "),a("p",[t._v("添加MicroTask任务：")]),t._v(" "),a("div",{staticClass:"language-dart extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleMicrotask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 微任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Microtask 一般用于非常短的内部异步动作, 并且任务量非常少, 如果微任务非常多, 就会造成 Event Queue 排不上队, 会阻塞 Event Queue 的执行(如: 用户点击没有反应). 所以, 大多数情况下优先考虑使用 Event Queue, 整个 Flutter 源代码仅引用 scheduleMicroTask() 方法 7 次.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);