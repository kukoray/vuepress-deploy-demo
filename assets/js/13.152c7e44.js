(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{435:function(_,v,t){"use strict";t.r(v);var a=t(65),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[_._v("#")]),_._v(" 操作系统")]),_._v(" "),t("h2",{attrs:{id:"进程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[_._v("#")]),_._v(" 进程间通信")]),_._v(" "),t("p",[_._v("进程之间通信必须通过内核。")]),_._v(" "),t("h3",{attrs:{id:"_1管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1管道"}},[_._v("#")]),_._v(" ①管道")]),_._v(" "),t("p",[_._v("管道传输数据是单向的，所以想通信，需要创建两个管道")]),_._v(" "),t("p",[t("strong",[_._v("所谓的管道，就是内核里面的一串缓存")]),_._v("。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，也就是从内核中读取这段数据。另外，管道传输的数据是无格式的流且大小受限。")]),_._v(" "),t("p",[_._v("对于"),t("strong",[_._v("匿名管道")]),_._v("，它的通信范围是存在父子关系的进程。因为管道没有实体，也就是没有管道文件，只能通过 fork 来复制父进程 fd 文件描述符，来达到通信的目的。")]),_._v(" "),t("p",[_._v("对于"),t("strong",[_._v("命名管道")]),_._v("，它可以在不相关的进程间也能相互通信。因为命令管道，提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。")]),_._v(" "),t("p",[_._v("不管是匿名管道还是命名管道，进程写入的数据都是缓存在内核中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循先进先出原则，不支持 lseek 之类的文件定位操作。")]),_._v(" "),t("h3",{attrs:{id:"_2消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2消息队列"}},[_._v("#")]),_._v(" ②消息队列")]),_._v(" "),t("p",[_._v("对于这个问题，消息队列的通信模式就可以解决。比如，A 进程要给 B 进程发送消息，A 进程把数据放在对应的消息队列后就可以正常返回了，B 进程需要的时候再去读取数据就可以了。同理，B 进程要给 A 进程发送消息也是如此。")]),_._v(" "),t("p",[_._v("再来，"),t("strong",[_._v("消息队列是保存在内核中的消息链表")]),_._v("，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。")]),_._v(" "),t("p",[_._v("消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在，而前面提到的匿名管道的生命周期，是随进程的创建而建立，随进程的结束而销毁。")]),_._v(" "),t("p",[_._v("消息这种模型，两个进程之间的通信就像平时发邮件一样，你来一封，我回一封，可以频繁沟通了。")]),_._v(" "),t("p",[_._v("但邮件的通信方式存在不足的地方有两点，一是通信不及时，二是附件也有大小限制，这同样也是消息队列通信不足的点。")]),_._v(" "),t("h3",{attrs:{id:"_3共享内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3共享内存"}},[_._v("#")]),_._v(" ③共享内存")]),_._v(" "),t("p",[_._v("现代操作系统，对于内存管理，采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。所以，即使进程 A 和 进程 B 的虚拟地址是一样的，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。")]),_._v(" "),t("p",[t("strong",[_._v("共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中")]),_._v("。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去，大大提高了进程间通信的速度。")]),_._v(" "),t("h3",{attrs:{id:"_4信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4信号量"}},[_._v("#")]),_._v(" ④信号量")]),_._v(" "),t("blockquote",[t("p",[_._v("为了解决共享内存带来的问题，引入了信号量机制")])]),_._v(" "),t("p",[_._v("为了防止多进程竞争共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，"),t("strong",[_._v("信号量")]),_._v("就实现了这一保护机制。")]),_._v(" "),t("p",[t("strong",[_._v("信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"_5socket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5socket"}},[_._v("#")]),_._v(" ⑤Socket")]),_._v(" "),t("p",[t("strong",[_._v("跨网络与不同主机上的进程间通信，就需要用到Socket技术")])]),_._v(" "),t("p",[_._v("实际上，Socket 通信不仅可以跨网络与不同主机的进程间通信，还可以在同主机上进程间通信")]),_._v(" "),t("p",[_._v("socket在我的理解里，算是应用层和传输层之间一个虚拟层，更像是一个接口。对于一个程序来说可以直接使用ip+port的方式来进行socket网络通信，可以使用tcp或udp协议来进行通信。")]),_._v(" "),t("h2",{attrs:{id:"什么是死锁-死锁产生的四个必要条件-如何预防死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是死锁-死锁产生的四个必要条件-如何预防死锁"}},[_._v("#")]),_._v(" 什么是死锁？死锁产生的四个必要条件？如何预防死锁？")]),_._v(" "),t("p",[_._v("死锁：多个进程因争夺资源而形成的一种僵局。")]),_._v(" "),t("p",[_._v("四个必要条件：")]),_._v(" "),t("p",[_._v("①  互斥条件：申请的资源是临界资源")]),_._v(" "),t("p",[_._v("②  请求和保持条件：占有一个资源的同时，申请另外的资源")]),_._v(" "),t("p",[_._v("③  不剥夺条件：进程的资源使用完之前，不能被剥夺")]),_._v(" "),t("p",[_._v("④  环路等待条件：死锁的n个进程形成环形进程资源链")]),_._v(" "),t("p",[_._v("预防死锁：思路是"),t("strong",[_._v("破坏死锁产生的必要条件")])]),_._v(" "),t("p",[_._v("①互斥条件没办法破坏，由资源的特性所决定     ×")]),_._v(" "),t("p",[_._v("②请求保持条件：进程创建时，一次申请所有资源。成功则运行，不成功则阻塞。 √")]),_._v(" "),t("p",[_._v("③不剥夺条件：申请资源成功则运行，不成功则释放已申请的所有资源。√")]),_._v(" "),t("p",[_._v("④环路等待条件：为资源进行编号，必须按序申请资源。√")]),_._v(" "),t("p",[_._v("避免死锁：银行家算法")]),_._v(" "),t("p",[_._v("找到一个安全序列，使得所有的进程能够按照这种次序依次完成。")]),_._v(" "),t("p",[_._v("死锁的检测：拓扑排序")]),_._v(" "),t("h2",{attrs:{id:"进程有哪几种状态-状态之间的转换、进程调度策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程有哪几种状态-状态之间的转换、进程调度策略"}},[_._v("#")]),_._v(" 进程有哪几种状态，状态之间的转换、进程调度策略？")]),_._v(" "),t("ol",[t("li",[_._v("创建状态")]),_._v(" "),t("li",[_._v("就绪状态")]),_._v(" "),t("li",[_._v("运行状态")]),_._v(" "),t("li",[_._v("阻塞状态")]),_._v(" "),t("li",[_._v("终止状态")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/api/personal/file/A61F5B5322ED49038C64BDD82D341987?method=download&shareKey=5967e74b9690c236b3ff1f73ac3e4433",alt:"进程五种状态转换图"}})]),_._v(" "),t("p",[_._v("其中的I/O事件，会产生中断，影响进程的运行")]),_._v(" "),t("p",[_._v("引起进程状态转换的具体原因如下：")]),_._v(" "),t("p",[_._v("NULL→新建态：执行一个程序，创建一个子进程。")]),_._v(" "),t("p",[_._v("新建态→就绪态：当操作系统完成了进程创建的必要操作，并且当前系统的性能和虚拟内存的容量均允许。")]),_._v(" "),t("p",[_._v("运行态→终止态：当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被操作系统所终结，或是被其他有终止权的进程所终结。")]),_._v(" "),t("p",[_._v("运行态→就绪态：运行时间片到；出现有更高优先权进程。")]),_._v(" "),t("p",[_._v("运行态→等待态：等待使用资源；如等待外设传输；等待人工干预。")]),_._v(" "),t("p",[_._v("就绪态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。")]),_._v(" "),t("p",[_._v("等待态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。")]),_._v(" "),t("p",[_._v("终止态→NULL：完成善后操作。")]),_._v(" "),t("h2",{attrs:{id:"进程调度策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程调度策略"}},[_._v("#")]),_._v(" "),t("strong",[_._v("进程调度策略")])]),_._v(" "),t("ol",[t("li",[_._v("先来先服务（FCFS）")]),_._v(" "),t("li",[_._v("短进程优先")]),_._v(" "),t("li",[_._v("最高响应比优先法")]),_._v(" "),t("li",[_._v("时间片轮转")]),_._v(" "),t("li",[_._v("多级反馈队列")])]),_._v(" "),t("h2",{attrs:{id:"系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[_._v("#")]),_._v(" 系统调用")]),_._v(" "),t("p",[_._v("首先，进程在系统上的 运行分为两个级别："),t("code",[_._v("用户态")]),_._v("和"),t("code",[_._v("系统态")])]),_._v(" "),t("ol",[t("li",[_._v("用户态(user mode) : 用户态运行的进程可以"),t("strong",[_._v("直接读取用户程序的数据。")])]),_._v(" "),t("li",[_._v("系统态(kernel mode):可以简单的理解系统态运行的进程或程序"),t("strong",[_._v("几乎可以访问计算机的任何资源，不受限制。")])])]),_._v(" "),t("p",[_._v("我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能咋办呢？那就需要系统调用了！")]),_._v(" "),t("p",[_._v("也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。")]),_._v(" "),t("h2",{attrs:{id:"进程和线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[_._v("#")]),_._v(" 进程和线程")]),_._v(" "),t("p",[_._v("（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。")]),_._v(" "),t("p",[_._v("（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。")]),_._v(" "),t("p",[_._v("（3）处理机分给线程，即真正在处理机上运行的是线程。")]),_._v(" "),t("p",[_._v("（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体.")])])}),[],!1,null,null,null);v.default=s.exports}}]);