(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{529:function(s,t,a){"use strict";a.r(t);var e=a(65),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"lua应用之redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua应用之redis"}},[s._v("#")]),s._v(" Lua应用之Redis")]),s._v(" "),a("blockquote",[a("p",[s._v("参考博客：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.51cto.com/article/628941.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("一网打尽Redis Lua脚本并发原子组合操作-51CTO.COM"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("我们知道Redis的单个命令是原子性的。")]),s._v(" "),a("p",[s._v("但是Redis的事务不保证原子性，因此我们希望能够组合多个Redis命令，让其变成一个原子性操作。")]),s._v(" "),a("p",[s._v("在Redis2.6版本引入了一个特性来解决这个问题，就是支持执行Lua脚本")]),s._v(" "),a("blockquote",[a("p",[s._v("redis脚本在实践中不要使用全局变量，局部变量效率更高")])]),s._v(" "),a("h2",{attrs:{id:"redis中的lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis中的lua"}},[s._v("#")]),s._v(" Redis中的Lua")]),s._v(" "),a("p",[a("strong",[s._v("1、eval命令")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意KEYS要大写否则无法识别")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" lock "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" nx ex "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nOK\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ttl lock\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return redis.call('del',KEYS[1])\"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" lock\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ttl lock\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -2\n")])])]),a("p",[a("strong",[s._v("2、call和pcall")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return redis.call('no_command')\"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ERR Error running script "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("call to f_1e6efd00ab50dd564a9f13e5775e27b966c2141e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": @user_script:1: @user_script: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": Unknown Redis "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" called from Lua script \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return redis.pcall('no_command')\"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" @user_script: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": Unknown Redis "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" called from Lua script \n")])])]),a("p",[s._v("这就像 Java 遇到一个异常，前者会直接抛出一个异常;后者会把异常处理成 JSON 返回。")]),s._v(" "),a("p",[a("strong",[s._v("3、值转换")])]),s._v(" "),a("p",[s._v("由于在 Redis 中存在 Redis 和 Lua 两种不同的运行环境，在 Redis 和 Lua 互相传递数据时必然发生对应的转换操作，这种转换操作是我们在实践中不能忽略的。")]),s._v(" "),a("p",[s._v("例如如果 Lua 脚本向 Redis 返回小数，那么会损失小数精度。")]),s._v(" "),a("p",[s._v("因此转换为字符串则是安全的。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return 3.14"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return tostring(3.14)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3.14"')]),s._v(" \n")])])]),a("p",[a("strong",[s._v("4、\b原子执行")])]),s._v(" "),a("p",[s._v("Lua 脚本在 Redis 中是以原子方式执行的，在 Redis 服务器执行EVAL命令时，在命令执行完毕并向调用者返回结果之前，只会执行当前命令指定的 Lua 脚本包含的所有逻辑，其它客户端发送的命令将被阻塞，直到EVAL命令执行完毕为止。")]),s._v(" "),a("p",[a("strong",[s._v("因此 LUA 脚本不宜编写一些过于复杂了逻辑，必须尽量保证 Lua 脚本的效率，否则会影响其它客户端。")])]),s._v(" "),a("p",[a("strong",[s._v("5、脚本管理")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("script load")]),s._v(" "),a("p",[s._v("加载脚本到缓存以达到重复使用，避免多次加载浪费带宽，每一个脚本都会通过 SHA 校验返回唯一字符串标识。需要配合EVALSHA命令来执行缓存后的脚本。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SCRIPT LOAD "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return 'hello'\"")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1b936e3fe509bcbc9cd0664897bbe8fd0cac101b"')]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVALSHA 1b936e3fe509bcbc9cd0664897bbe8fd0cac101b "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" \n")])])])]),s._v(" "),a("li",[a("p",[s._v("script flush")]),s._v(" "),a("p",[s._v("既然有缓存就有清除缓存，但是遗憾的是"),a("mark",[s._v("并没有根据 SHA 来删除脚本缓存")]),s._v("，而是清除所有的脚本缓存，所以在生产中一般不会再生产过程中使用该命令。")])]),s._v(" "),a("li",[a("p",[s._v("script exists")]),s._v(" "),a("p",[s._v("以 SHA 标识为参数检查一个或者多个缓存是否存在。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SCRIPT EXISTS 1b936e3fe509bcbc9cd0664897bbe8fd0cac101b  1b936e3fe509bcbc9cd0664897bbe8fd0cac1012 \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])])])]),s._v(" "),a("li",[a("p",[s._v("script kill")]),s._v(" "),a("p",[s._v("终止正在执行的脚本。但是为了数据的完整性此命令并不能保证一定能终止成功。如果当一个脚本执行了一部分写的逻辑而需要被终止时，该命令是不凑效的。需要执行SHUTDOWN nosave在不对数据执行持久化的情况下终止服务器来完成终止脚本。")])])]),s._v(" "),a("h2",{attrs:{id:"注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),a("ul",[a("li",[s._v("务必对 Lua 脚本进行全面测试以保证其逻辑的健壮性，"),a("strong",[s._v("当 Lua 脚本遇到异常时，已经执行过的逻辑是不会回滚的。")])]),s._v(" "),a("li",[a("strong",[s._v("尽量不使用 Lua 提供的具有随机性的函数，参见相关官方文档。")])]),s._v(" "),a("li",[s._v("在 Lua 脚本中不要编写function函数,整个脚本作为一个函数的函数体。")]),s._v(" "),a("li",[s._v("在脚本编写中声明的变量"),a("strong",[s._v("全部使用local关键字")]),s._v("。")]),s._v(" "),a("li",[s._v("在集群中使用 Lua 脚本要确保逻辑中所有的key分到相同机器，也就是同一个插槽(slot)中，可采用"),a("strong",[s._v("Redis Hash Tag技术。")])]),s._v(" "),a("li",[s._v("再次重申 Lua 脚本一定不要包含过于耗时、过于复杂的逻辑。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);